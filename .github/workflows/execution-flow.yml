name: Website Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."

  report:
    needs:
      - lint
      - test
      - build
      - deploy
    runs-on: ubuntu-latest
    env:
      LINT_FLAG: ${{ needs.lint.result != 'success' }}
      TEST_FLAG: ${{ needs.test.result != 'success' }}
      BUILD_FLAG: ${{ needs.build.result != 'success' }}
      DEPLOY_FLAG: ${{ needs.deploy.result != 'success' }}

    # Talk about stupid, this one liner should work
    # if: failure()

    # By default, once a step in a running job fails, all the subsequent steps
    # in this job will be skipped and this job will be marked as failed.

    # So here's the hack
    if: always() && (needs.lint.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success' || needs.deploy.result != 'success')

    steps:
      - name: Debug information          
        run: |
          echo "LINT_FLAG: $LINT_FLAG"
          echo "TEST_FLAG: $TEST_FLAG"
          echo "BUILD_FLAG: $BUILD_FLAG"
          echo "DEPLOY_FLAG: $DEPLOY_FLAG"

      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ toJSON(github) }}"

  results:
    needs: [lint, test, build, deploy, report]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Output results
        run: |
          echo "LINT: ${{ needs.lint.result }}"
          echo "TEST: ${{ needs.test.result }}"
          echo "BUILD: ${{ needs.build.result }}"
          echo "DEPLOY: ${{ needs.deploy.result }}" 
          echo "REPORT: ${{ needs.report.result }}" 
        